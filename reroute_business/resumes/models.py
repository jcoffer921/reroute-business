# models.py
from django.db import models
from django.contrib.auth.models import User
from job_list.models import Job
from core.models import Skill

US_STATE_CHOICES = [
    ('AL', 'Alabama'),
    ('AK', 'Alaska'),
    ('AZ', 'Arizona'),
    ('AR', 'Arkansas'),
    ('CA', 'California'),
    ('CO', 'Colorado'),
    ('CT', 'Connecticut'),
    ('DE', 'Delaware'),
    ('FL', 'Florida'),
    ('GA', 'Georgia'),
    ('HI', 'Hawaii'),
    ('ID', 'Idaho'),
    ('IL', 'Illinois'),
    ('IN', 'Indiana'),
    ('IA', 'Iowa'),
    ('KS', 'Kansas'),
    ('KY', 'Kentucky'),
    ('LA', 'Louisiana'),
    ('ME', 'Maine'),
    ('MD', 'Maryland'),
    ('MA', 'Massachusetts'),
    ('MI', 'Michigan'),
    ('MN', 'Minnesota'),
    ('MS', 'Mississippi'),
    ('MO', 'Missouri'),
    ('MT', 'Montana'),
    ('NE', 'Nebraska'),
    ('NV', 'Nevada'),
    ('NH', 'New Hampshire'),
    ('NJ', 'New Jersey'),
    ('NM', 'New Mexico'),
    ('NY', 'New York'),
    ('NC', 'North Carolina'),
    ('ND', 'North Dakota'),
    ('OH', 'Ohio'),
    ('OK', 'Oklahoma'),
    ('OR', 'Oregon'),
    ('PA', 'Pennsylvania'),
    ('RI', 'Rhode Island'),
    ('SC', 'South Carolina'),
    ('SD', 'South Dakota'),
    ('TN', 'Tennessee'),
    ('TX', 'Texas'),
    ('UT', 'Utah'),
    ('VT', 'Vermont'),
    ('VA', 'Virginia'),
    ('WA', 'Washington'),
    ('WV', 'West Virginia'),
    ('WI', 'Wisconsin'),
    ('WY', 'Wyoming'),
]

# models.py
class Resume(models.Model):
    """
    Core resume record. Supports both:
    - 'Created' resumes (builder flow) via Education / Experience related_name sets.
    - 'Imported' resumes via EducationEntry / ExperienceEntry sets.
    """
    TEMPLATE_CHOICES = [
        ('reroute', 'ReRoute'),
        ('professional', 'Professional'),
        ('modern', 'Modern'),
        ('simple', 'Simple'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='resume_resumes')
    file = models.FileField(upload_to='resumes/', blank=True, null=True)
    preview_image = models.ImageField(upload_to='resumes/previews/', blank=True, null=True)
    # Default to ReRoute style so initial downloads match the in-app created view
    template = models.CharField(max_length=20, choices=TEMPLATE_CHOICES, default='reroute')
    full_name = models.CharField(max_length=100, blank=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # Imported-extraction fields
    raw_text = models.TextField(blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    full_text = models.TextField(blank=True)
    ai_summary = models.TextField(blank=True, help_text="Summary generated by AI")
    is_imported = models.BooleanField(default=False)

    # Skills (keep existing custom table to avoid migration churn)
    skills = models.ManyToManyField(
        'core.Skill',
        related_name='resumes',
        blank=True,
        db_table='resumes_resume_skills'
    )

    summary = models.TextField(blank=True, null=True)
    certifications = models.TextField(blank=True, help_text="One per line. Optional.")

    def __str__(self):
        return f"Resume for {self.user.username}"

    # ---- Convenience helpers for unified reads ----
    @property
    def all_education(self):
        """
        Return a unified list of education entries regardless of source.
        """
        # Builder-created entries
        created = list(self.education.all())
        # Imported entries
        imported = list(self.education_entries.all())
        return created if created else imported

    @property
    def all_experience(self):
        """
        Return a unified list of experience entries regardless of source.
        """
        created = list(self.experiences.all())
        imported = list(self.experience_entries.all())
        return created if created else imported


class ContactInfo(models.Model):
    """
    One-to-one with Resume. Used by builder flow and can be filled by importer.
    """
    resume = models.OneToOneField('resumes.Resume', on_delete=models.CASCADE, related_name='contact_info')
    full_name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20, blank=True)
    city = models.CharField(max_length=100, blank=True)
    state = models.CharField(max_length=2, choices=US_STATE_CHOICES, blank=True)

    def __str__(self):
        return self.full_name


class Education(models.Model):
    """
    Builder-flow education/training entry.
    """
    resume = models.ForeignKey('resumes.Resume', on_delete=models.CASCADE, related_name='education')
    school = models.CharField("School / Program / Training Name", max_length=255)
    degree = models.CharField("Degree / Certification / Course", max_length=255, blank=True)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    description = models.TextField("Description (optional)", blank=True)

    def __str__(self):
        return f"{self.school} - {self.degree}" if self.degree else f"{self.school}"


class Experience(models.Model):
    """
    Builder-flow experience entry.
    """
    resume = models.ForeignKey('resumes.Resume', on_delete=models.CASCADE, related_name='experiences')
    job_title = models.CharField(max_length=100)
    company = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    currently_work_here = models.BooleanField(default=False)
    description = models.TextField(blank=True)

    def __str__(self):
        return f"{self.job_title} at {self.company}"


class Project(models.Model):
    resume = models.ForeignKey('resumes.Resume', on_delete=models.CASCADE, related_name='projects')
    title = models.CharField(max_length=255)
    link = models.URLField(blank=True)
    description = models.TextField(blank=True)


class Application(models.Model):
    """
    Connects a user to a job they've applied to.
    """
    applicant = models.ForeignKey(User, on_delete=models.CASCADE, related_name='resume_applications')
    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name='resume_job_applications')
    status = models.CharField(max_length=50, default='pending')  # pending, accepted, rejected, etc.

    def __str__(self):
        return f"{self.applicant.username} applied to {self.job.title}"


# ------- Imported-only flat entries (from parsed resumes) -------

class EducationEntry(models.Model):
    resume = models.ForeignKey(Resume, on_delete=models.CASCADE, related_name="education_entries")
    school_name = models.CharField(max_length=255)
    degree = models.CharField(max_length=255, blank=True)
    graduation_year = models.CharField(max_length=4, blank=True)


class ExperienceEntry(models.Model):
    resume = models.ForeignKey(Resume, on_delete=models.CASCADE, related_name="experience_entries")
    job_title = models.CharField(max_length=255)
    company = models.CharField(max_length=255)
    dates = models.CharField(max_length=100, blank=True)
